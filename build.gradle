import com.gtnewhorizons.retrofuturagradle.mcp.ReobfuscatedJar
import org.jetbrains.gradle.ext.Gradle

plugins {
    id("java")
    id("java-library")
    id("maven-publish")
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
    id("eclipse")
    id("com.gtnewhorizons.retrofuturagradle") version "1.3.2"
    id("com.matthewprenger.cursegradle") version "1.4.0"
}

version = mod_version
group = "${mod_group}"
ext.version = "${mod_version}"
ext.id = "${mod_id}"
ext.name = "${mod_name}"
ext.author = "${mod_author}"
ext.description = "${mod_description}"
ext.url = "${mod_url}"
ext.loader = "${loader_version.replaceAll("\\..*", "")}"
ext.forge = "${loader_version}"
ext.mc = "${mc_version}"

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    withJavadocJar()
}

minecraft {
    mcVersion = "1.12.2"

    injectedTags.put("VERSION", project.version)

    extraRunJvmArguments.addAll("-ea:${project.group}", "-Dmixin.debug.export=true")
}

tasks.injectTags.configure {
    outputClassName.set("${project.group}.Tags")
}

tasks.deobfuscateMergedJarToSrg.configure {
    accessTransformerFiles.from("src/main/resources/META-INF/${mod_id}_at.cfg")
}

repositories {
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        // JEI
        name 'Progwml6 Maven'
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        // CraftTweaker and JEI Backup
        name 'BlameJared Maven'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'Curse Maven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'Sponge Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'Maven Maven'
        url 'https://maven.cil.li/'
    }
    mavenLocal()
}

dependencies {
    // Hard Dependencies
    // the CCL deobf jar uses very old MCP mappings, making it error at runtime in runClient/runServer
    // therefore we manually deobf the regular jar
    implementation rfg.deobf("curse.maven:codechicken-lib-1-8-${ccl_pid}:${ccl_fid}")

    // Soft Dependencies
    implementation "mezz.jei:jei_1.12.2:${project.jei_version}"
    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${project.crt_version}"
    implementation rfg.deobf("curse.maven:top-${top_pid}:${top_fid}")
    implementation rfg.deobf("curse.maven:ctm-${ctm_pid}:${ctm_fid}")
    // use a local jar for GroovyScript to avoid a bug from Mixin and ForgeGradle,
    // causing crashes at run-time when deobfuscated
    implementation files("libs/groovyscript-0.4.0.jar")
    //implementation fg.deobf("curse.maven:groovyscript-${grs_pid}:${grs_fid}")
    implementation rfg.deobf("curse.maven:ae2-extended-life-${ae2_pid}:${ae2_fid}")

    // Tests
    testImplementation("org.junit.jupiter:junit-jupiter:${junit_version}")
    testImplementation("org.hamcrest:hamcrest:${hamcrest_version}")

    // Compile-Time Dependencies

    // GroovyScript dependency
    implementation "zone.rong:mixinbooter:${mixinbooter_version}"

    // Mixin dependency
    implementation ("org.spongepowered:mixin:${mixin_annotations_version}") {
        transitive = false
    }
//    implementation 'org.spongepowered:mixin:0.8.5'
}

def mixinConfigRefMap = 'mixins.' + project.ext.id + '.refmap.json'
def mixinTmpDir = buildDir.path + File.separator + 'tmp' + File.separator + 'mixins'
def refMap = "${mixinTmpDir}" + File.separator + mixinConfigRefMap
def mixinSrg = "${mixinTmpDir}" + File.separator + "mixins.srg"

tasks.named("reobfJar", ReobfuscatedJar).configure {
    extraSrgFiles.from(mixinSrg)
}

tasks.named("compileJava", JavaCompile).configure {
    doFirst {
        new File(mixinTmpDir).mkdirs()
    }
    options.compilerArgs += [
        "-AreobfSrgFile=${tasks.reobfJar.srg.get().asFile}",
        "-AoutSrgFile=${mixinSrg}",
        "-AoutRefMapFile=${refMap}",
    ]
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_id", project.ext.id
    inputs.property "mod_name", project.ext.name
    inputs.property "mod_name2", project.ext.name.replaceAll("\\s", "")
    inputs.property "mod_version", project.ext.version
    inputs.property "mod_group", project.group
    inputs.property "mod_url", project.ext.url
    inputs.property "mod_description", project.ext.description
    inputs.property "mod_author", project.ext.author
    inputs.property "loader_version", project.ext.loader
    inputs.property "forge_version", project.ext.forge
    inputs.property "mc_version", project.ext.mc

    // replace stuff in mcmod.info and pack.mcmeta
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand (
                'mod_id': project.ext.id,
                'mod_name': project.ext.name,
                'mod_name2': project.ext.name.replaceAll("\\s", ""),
                'mod_version': project.ext.version,
                'mod_group': project.group,
                'mod_url': project.ext.url,
                'mod_description': project.ext.description,
                'mod_author': project.ext.author,
                'loader_version': project.ext.loader,
                'forge_version': project.ext.forge,
                'mc_version': project.ext.mc
        )
    }

    // Embed mixin refmap
    from refMap
    dependsOn("compileJava")
}

jar {
    manifest {
        attributes "FMLCorePlugin": project.group + ".core." + project.ext.name.replaceAll("\\s", "") + "Core"
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
    }
}

publishing {

    publications {

        mavenJava (MavenPublication) {

//            artifact sourceJar
//            artifact javadocJar
            from components.java
        }
    }
}

idea {
    module { inheritOutputDirs = true }
    project { settings {
        runConfigurations {
            "1. Run Client"(Gradle) {
                taskNames = ["runClient"]
            }
            "2. Run Server"(Gradle) {
                taskNames = ["runServer"]
            }
            "3. Run Obfuscated Client"(Gradle) {
                taskNames = ["runObfClient"]
            }
            "4. Run Obfuscated Server"(Gradle) {
                taskNames = ["runObfServer"]
            }
        }
        compiler.javac {
            afterEvaluate {
                javacAdditionalOptions = "-encoding utf8"
                moduleJavacAdditionalOptions = [
                        (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                ]
            }
        }
    }}
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}

//curseforge {
//    if (!file('CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }
//    apiKey = project.hasProperty('CURSEFORGE_TOKEN') ? project.findProperty('CURSEFORGE_TOKEN') : (System.getenv("CURSEFORGE_TOKEN") != null ? System.getenv("CURSEFORGE_TOKEN") : '')
//    project {
//        id = project_curse_id
//        changelogType = 'markdown'
//        changelog = file('CHANGELOG.md')
//        releaseType = project_release_type
//        addGameVersion 'Forge'
//        // add supported game versions separated by comma
//        project_game_versions.split(",").each {
//            addGameVersion it.trim()
//        }
//        mainArtifact(jar) {
//            displayName = "[FORGE] [${mc_version}] ${rootProject.name}-v${mod_version}"
//            relations {
//                requiredDependency 'mixinbootstrap'
//                optionalDependency 'mixin-booter'
//            }
//        }
//    }
//    options {
//        javaVersionAutoDetect = false
//        forgeGradleIntegration = false
//    }
//}
