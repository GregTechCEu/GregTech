package gregtech.api.pattern;

import gregtech.api.GregTechAPI;
import gregtech.api.block.IHeatingCoilBlockStats;
import gregtech.api.metatileentity.MetaTileEntity;
import gregtech.api.metatileentity.interfaces.IGregTechTileEntity;
import gregtech.api.metatileentity.multiblock.MultiblockControllerBase;
import gregtech.api.util.BlockInfo;

import net.minecraft.block.state.IBlockState;
import net.minecraft.client.resources.I18n;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraftforge.fml.common.FMLCommonHandler;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

import it.unimi.dsi.fastutil.objects.Object2IntMap;

import java.util.*;
import java.util.function.BiPredicate;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public class TraceabilityPredicate {

    // Allow any block.
    public static final TraceabilityPredicate ANY = new TraceabilityPredicate((state) -> true);
    // Allow the air block.
    public static final TraceabilityPredicate AIR = new TraceabilityPredicate(
            blockWorldState -> blockWorldState.getBlockState().getBlock().isAir(blockWorldState.getBlockState(),
                    blockWorldState.getWorld(), blockWorldState.getPos()));
    // Allow all heating coils, and require them to have the same type.
    public static Supplier<TraceabilityPredicate> HEATING_COILS = () -> new TraceabilityPredicate(
            (blockWorldState, info) -> {
                IBlockState blockState = blockWorldState.getBlockState();
                if (GregTechAPI.HEATING_COILS.containsKey(blockState)) {
                    IHeatingCoilBlockStats stats = GregTechAPI.HEATING_COILS.get(blockState);
                    Object currentCoil = info.getContext().getOrPut("CoilType", stats);
                    if (!currentCoil.equals(stats)) {
                        info.setError(new PatternStringError("gregtech.multiblock.pattern.error.coils"));
                        return false;
                    }
                    info.getContext().getOrPut("VABlock", new LinkedList<>()).add(blockWorldState.getPos());
                    return true;
                }
                return false;
            }, () -> GregTechAPI.HEATING_COILS.entrySet().stream()
                    // sort to make autogenerated jei previews not pick random coils each game load
                    .sorted(Comparator.comparingInt(entry -> entry.getValue().getTier()))
                    .map(entry -> new BlockInfo(entry.getKey(), null))
                    .toArray(BlockInfo[]::new))
                            .addTooltips("gregtech.multiblock.pattern.error.coils");

    public final List<SimplePredicate> common = new ArrayList<>();
    public final List<SimplePredicate> limited = new ArrayList<>();
    protected boolean isCenter;
    protected boolean hasAir = false;
    protected boolean isSingle = true;

    public TraceabilityPredicate() {}

    public TraceabilityPredicate(TraceabilityPredicate predicate) {
        common.addAll(predicate.common);
        limited.addAll(predicate.limited);
        isCenter = predicate.isCenter;
        hasAir = predicate.hasAir;
        isSingle = predicate.isSingle;
    }

    @Deprecated
    public TraceabilityPredicate(Predicate<BlockWorldState> predicate, Supplier<BlockInfo[]> candidates) {
        common.add(new SimplePredicate(predicate, candidates));
    }

    public TraceabilityPredicate(Predicate<BlockWorldState> predicate) {
        this(predicate, null);
    }

    @Deprecated
    public TraceabilityPredicate(BiPredicate<BlockWorldState, StructureInfo> predicate,
                                 Supplier<BlockInfo[]> candidates) {
        common.add(new SimplePredicate(predicate, candidates));
    }

    public TraceabilityPredicate(BiPredicate<BlockWorldState, StructureInfo> predicate) {
        this(predicate, null);
    }

    public boolean isSingle() {
        return isSingle;
    }

    /**
     * Mark it as the controller of this multi. Normally you won't call it yourself. Use
     * {@link MultiblockControllerBase#selfPredicate()} plz.
     */
    public TraceabilityPredicate setCenter() {
        isCenter = true;
        return this;
    }

    public TraceabilityPredicate sort() {
        limited.sort(Comparator.comparingInt(a -> ((a.minLayerCount + 1) * 100 + a.minGlobalCount)));
        return this;
    }

    /**
     * Add tooltips for candidates. They are shown in JEI Pages.
     * Do NOT pass {@link I18n#format(String, Object...)} calls here! Everything is will be translated when it's needed.
     * If you need parameters, use {@link #addTooltip(String, Object...)} instead.
     */
    public TraceabilityPredicate addTooltips(String... tips) {
        if (FMLCommonHandler.instance().getSide() == Side.CLIENT && tips.length > 0) {
            List<String> tooltips = Arrays.stream(tips).collect(Collectors.toList());
            common.forEach(predicate -> {
                if (predicate.candidates == null) return;
                if (predicate.toolTips == null) {
                    predicate.toolTips = new ArrayList<>();
                }
                predicate.toolTips.addAll(tooltips);
            });
            limited.forEach(predicate -> {
                if (predicate.candidates == null) return;
                if (predicate.toolTips == null) {
                    predicate.toolTips = new ArrayList<>();
                }
                predicate.toolTips.addAll(tooltips);
            });
        }
        return this;
    }

    /**
     * Gets the candidates for this predicate.
     * 
     * @return A list containing lists which group together candidates
     */
    public List<List<ItemStack>> getCandidates() {
        List<List<ItemStack>> candidates = new ArrayList<>();
        for (TraceabilityPredicate.SimplePredicate common : common) {
            candidates.add(common.getCandidates());
        }
        for (TraceabilityPredicate.SimplePredicate limited : limited) {
            candidates.add(limited.getCandidates());
        }
        return candidates;
    }

    /**
     * Note: This method does not translate dynamically!! Parameters can not be updated once set.
     */
    public TraceabilityPredicate addTooltip(String langKey, Object... data) {
        if (FMLCommonHandler.instance().getSide() == Side.CLIENT) {
            addTooltips(I18n.format(langKey, data));
        }
        return this;
    }

    /**
     * Set the minimum number of candidate blocks.
     */
    public TraceabilityPredicate setMinGlobalLimited(int min) {
        limited.addAll(common);
        common.clear();
        for (SimplePredicate predicate : limited) {
            predicate.minGlobalCount = min;
        }
        return this;
    }

    public TraceabilityPredicate setMinGlobalLimited(int min, int previewCount) {
        return this.setMinGlobalLimited(min).setPreviewCount(previewCount);
    }

    /**
     * Set the maximum number of candidate blocks.
     */
    public TraceabilityPredicate setMaxGlobalLimited(int max) {
        limited.addAll(common);
        common.clear();
        for (SimplePredicate predicate : limited) {
            predicate.maxGlobalCount = max;
        }
        return this;
    }

    public TraceabilityPredicate setMaxGlobalLimited(int max, int previewCount) {
        return this.setMaxGlobalLimited(max).setPreviewCount(previewCount);
    }

    /**
     * Set the minimum number of candidate blocks for each aisle layer.
     */
    public TraceabilityPredicate setMinLayerLimited(int min) {
        limited.addAll(common);
        common.clear();
        for (SimplePredicate predicate : limited) {
            predicate.minLayerCount = min;
        }
        return this;
    }

    public TraceabilityPredicate setMinLayerLimited(int min, int previewCount) {
        return this.setMinLayerLimited(min).setPreviewCount(previewCount);
    }

    /**
     * Set the maximum number of candidate blocks for each aisle layer.
     */
    public TraceabilityPredicate setMaxLayerLimited(int max) {
        limited.addAll(common);
        common.clear();
        for (SimplePredicate predicate : limited) {
            predicate.maxLayerCount = max;
        }
        return this;
    }

    public TraceabilityPredicate setMaxLayerLimited(int max, int previewCount) {
        return this.setMaxLayerLimited(max).setPreviewCount(previewCount);
    }

    /**
     * Sets the Minimum and Maximum limit to the passed value
     *
     * @param limit The Maximum and Minimum limit
     */
    public TraceabilityPredicate setExactLimit(int limit) {
        return this.setMinGlobalLimited(limit).setMaxGlobalLimited(limit);
    }

    /**
     * Set the number of it appears in JEI pages. It only affects JEI preview. (The specific number)
     */
    public TraceabilityPredicate setPreviewCount(int count) {
        common.forEach(predicate -> predicate.previewCount = count);
        limited.forEach(predicate -> predicate.previewCount = count);
        return this;
    }

    public boolean test(BlockWorldState blockWorldState, StructureInfo info, Object2IntMap<SimplePredicate> globalCache,
                        Object2IntMap<SimplePredicate> layerCache) {
        for (SimplePredicate predicate : limited) {
            if (predicate.testLimited(blockWorldState, info, globalCache, layerCache)) {
                return true;
            }
        }
        return common.stream().anyMatch(predicate -> predicate.test(blockWorldState, info));
    }

    public TraceabilityPredicate or(TraceabilityPredicate other) {
        if (other != null) {
            TraceabilityPredicate newPredicate = new TraceabilityPredicate(this);
            if (this != AIR && other != AIR) {
                newPredicate.isSingle = false;
            } else {
                newPredicate.isSingle = this.isSingle && other.isSingle;
            }
            newPredicate.hasAir = newPredicate.hasAir || this == AIR || other == AIR;
            newPredicate.common.addAll(other.common);
            newPredicate.limited.addAll(other.limited);
            return newPredicate;
        }
        return this;
    }

    public static class SimplePredicate {

        public final Supplier<BlockInfo[]> candidates;

        public final BiPredicate<BlockWorldState, StructureInfo> predicate;

        @SideOnly(Side.CLIENT)
        private List<String> toolTips;

        public int minGlobalCount = -1;
        public int maxGlobalCount = -1;
        public int minLayerCount = -1;
        public int maxLayerCount = -1;

        public int previewCount = -1;

        @Deprecated
        public SimplePredicate(Predicate<BlockWorldState> predicate, Supplier<BlockInfo[]> candidates) {
            // legacy compat
            this.predicate = (state, info) -> predicate.test(state);
            this.candidates = candidates;
        }

        public SimplePredicate(BiPredicate<BlockWorldState, StructureInfo> predicate,
                               Supplier<BlockInfo[]> candidates) {
            this.predicate = predicate;
            this.candidates = candidates;
        }

        @SideOnly(Side.CLIENT)
        public List<String> getToolTips(TraceabilityPredicate predicates) {
            List<String> result = new ArrayList<>();
            if (toolTips != null) {
                toolTips.forEach(tip -> result.add(I18n.format(tip)));
            }
            if (minGlobalCount == maxGlobalCount && maxGlobalCount != -1) {
                result.add(I18n.format("gregtech.multiblock.pattern.error.limited_exact", minGlobalCount));
            } else if (minGlobalCount != maxGlobalCount && minGlobalCount != -1 && maxGlobalCount != -1) {
                result.add(I18n.format("gregtech.multiblock.pattern.error.limited_within", minGlobalCount,
                        maxGlobalCount));
            } else {
                if (minGlobalCount != -1) {
                    result.add(I18n.format("gregtech.multiblock.pattern.error.limited.1", minGlobalCount));
                }
                if (maxGlobalCount != -1) {
                    result.add(I18n.format("gregtech.multiblock.pattern.error.limited.0", maxGlobalCount));
                }
            }
            if (minLayerCount != -1) {
                result.add(I18n.format("gregtech.multiblock.pattern.error.limited.3", minLayerCount));
            }
            if (maxLayerCount != -1) {
                result.add(I18n.format("gregtech.multiblock.pattern.error.limited.2", maxLayerCount));
            }
            if (predicates == null) return result;
            if (predicates.isSingle) {
                result.add(I18n.format("gregtech.multiblock.pattern.single"));
            }
            if (predicates.hasAir) {
                result.add(I18n.format("gregtech.multiblock.pattern.replaceable_air"));
            }
            return result;
        }

        public boolean test(BlockWorldState state, StructureInfo info) {
            return predicate.test(state, info);
        }

        public boolean testLimited(BlockWorldState blockWorldState, StructureInfo info,
                                   Object2IntMap<SimplePredicate> globalCache,
                                   Object2IntMap<SimplePredicate> layerCache) {
            return testGlobal(blockWorldState, info, globalCache) && testLayer(blockWorldState, info, layerCache);
        }

        public boolean testGlobal(BlockWorldState blockWorldState, StructureInfo info,
                                  Object2IntMap<SimplePredicate> cache) {
            if (minGlobalCount == -1 && maxGlobalCount == -1) return true;

            boolean base = predicate.test(blockWorldState, info);
            int count = cache.getInt(this);
            count += base ? 1 : 0;
            cache.put(this, count);
            if (maxGlobalCount == -1 || count <= maxGlobalCount) return base;
            info.setError(new SinglePredicateError(this, 0));
            return false;
        }

        public boolean testLayer(BlockWorldState blockWorldState, StructureInfo info,
                                 Object2IntMap<SimplePredicate> cache) {
            if (minLayerCount == -1 && maxLayerCount == -1) return true;

            boolean base = predicate.test(blockWorldState, info);
            int count = cache.getInt(this);
            count += base ? 1 : 0;
            cache.put(this, count);
            if (maxLayerCount == -1 || count <= maxLayerCount) return base;
            info.setError(new SinglePredicateError(this, 2));
            return false;
        }

        public List<ItemStack> getCandidates() {
            return candidates == null ? Collections.emptyList() : Arrays.stream(this.candidates.get())
                    .filter(info -> info.getBlockState().getBlock() != Blocks.AIR).map(info -> {
                        IBlockState blockState = info.getBlockState();
                        MetaTileEntity metaTileEntity = info.getTileEntity() instanceof IGregTechTileEntity ?
                                ((IGregTechTileEntity) info.getTileEntity()).getMetaTileEntity() : null;
                        if (metaTileEntity != null) {
                            return metaTileEntity.getStackForm();
                        } else {
                            return new ItemStack(Item.getItemFromBlock(blockState.getBlock()), 1,
                                    blockState.getBlock().damageDropped(blockState));
                        }
                    }).collect(Collectors.toList());
        }
    }

    public static class SinglePredicateError extends PatternError {

        public final int type, number;

        public SinglePredicateError(SimplePredicate failingPredicate, int type) {
            super(null, Collections.singletonList(failingPredicate.getCandidates()));
            this.type = type;

            int number = -1;
            if (type == 0) number = failingPredicate.maxGlobalCount;
            if (type == 1) number = failingPredicate.minGlobalCount;
            if (type == 2) number = failingPredicate.maxLayerCount;
            if (type == 3) number = failingPredicate.minLayerCount;

            this.number = number;
        }

        @SideOnly(Side.CLIENT)
        @Override
        public String getErrorInfo() {
            return I18n.format("gregtech.multiblock.pattern.error.limited." + type, number);
        }
    }
}
